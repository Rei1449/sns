// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // schemas = ["public", "auth"]
}

// generator client {
//   provider        = "prisma-client-js"
//   previewFeatures = ["multiSchema"]
// }

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  followings Follow[] @relation("Followings")
  followers  Follow[] @relation("Followers")

  // @@schema("auth") // or @@schema("public")
}

model Follow {
  // id             Int @id @default(autoincrement())
  followUserId   Int
  followedUserId Int

  // @@unique に名前をつけておくと分かりやすい
  @@unique([followUserId, followedUserId], name: "unique_follow_pair")

  followings User @relation("Followings", fields: [followUserId], references: [id], onDelete: Cascade)
  followeds  User @relation("Followers", fields: [followedUserId], references: [id], onDelete: Cascade)

  // Cascadeで親がいなくなったら子もいなくなる
  // 同じモデル（User）を2回参照するリレーションを定義するとき、それぞれのリレーションにnameを付けて区別する
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  lat       Float    @default(90.0)
  long      Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Test {
  id   Int    @id @default(autoincrement())
  name String
}
